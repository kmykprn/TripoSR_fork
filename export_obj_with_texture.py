import numpy as np
import os

def export_obj_with_texture(filepath, vertices, faces, uvs, normals, texture_path=None):
    """
    Export a mesh as OBJ file with texture coordinates.
    
    Args:
        filepath: Path to save the OBJ file
        vertices: Vertex positions (N, 3)
        faces: Face indices (M, 3)
        uvs: UV coordinates (N, 2)
        normals: Vertex normals (N, 3)
        texture_path: Optional path to texture image
    """
    
    # Get directory and filename
    directory = os.path.dirname(filepath)
    filename = os.path.basename(filepath)
    base_name = os.path.splitext(filename)[0]
    
    # Write MTL file if texture is provided
    if texture_path:
        mtl_filepath = os.path.join(directory, f"{base_name}.mtl")
        with open(mtl_filepath, 'w') as f:
            f.write(f"newmtl material_0\n")
            f.write(f"Ka 1.0 1.0 1.0\n")  # Ambient color
            f.write(f"Kd 1.0 1.0 1.0\n")  # Diffuse color
            f.write(f"Ks 0.0 0.0 0.0\n")  # Specular color
            f.write(f"Ns 10.0\n")  # Specular exponent
            f.write(f"Ni 1.0\n")  # Optical density
            f.write(f"d 1.0\n")  # Transparency
            f.write(f"illum 2\n")  # Illumination model
            f.write(f"map_Kd {os.path.basename(texture_path)}\n")  # Texture map
    
    # Write OBJ file
    with open(filepath, 'w') as f:
        # Write header
        f.write("# OBJ file generated by TripoSR with texture\n")
        
        # Write MTL reference if texture is provided
        if texture_path:
            f.write(f"mtllib {base_name}.mtl\n")
        
        # Write vertices
        for v in vertices:
            f.write(f"v {v[0]:.6f} {v[1]:.6f} {v[2]:.6f}\n")
        
        # Write normals
        for n in normals:
            f.write(f"vn {n[0]:.6f} {n[1]:.6f} {n[2]:.6f}\n")
        
        # Write UV coordinates
        for uv in uvs:
            f.write(f"vt {uv[0]:.6f} {uv[1]:.6f}\n")
        
        # Use material if texture is provided
        if texture_path:
            f.write("usemtl material_0\n")
        
        # Write faces (OBJ uses 1-based indexing)
        for face in faces:
            # Format: f v1/vt1/vn1 v2/vt2/vn2 v3/vt3/vn3
            f.write(f"f {face[0]+1}/{face[0]+1}/{face[0]+1} "
                   f"{face[1]+1}/{face[1]+1}/{face[1]+1} "
                   f"{face[2]+1}/{face[2]+1}/{face[2]+1}\n")
    
    print(f"Exported OBJ to {filepath}")
    if texture_path:
        print(f"Exported MTL to {mtl_filepath}")


if __name__ == "__main__":
    # Test the function
    import trimesh
    
    # Create a simple test mesh
    mesh = trimesh.creation.icosphere(subdivisions=2)
    
    # Create simple UV coordinates (spherical mapping)
    vertices = mesh.vertices
    uvs = np.zeros((len(vertices), 2), dtype=np.float32)
    for i, v in enumerate(vertices):
        # Simple spherical UV mapping
        theta = np.arctan2(v[1], v[0])
        phi = np.arccos(v[2] / np.linalg.norm(v))
        uvs[i, 0] = (theta + np.pi) / (2 * np.pi)
        uvs[i, 1] = phi / np.pi
    
    # Export
    os.makedirs("test_custom_export", exist_ok=True)
    export_obj_with_texture(
        "test_custom_export/test.obj",
        vertices,
        mesh.faces,
        uvs,
        mesh.vertex_normals,
        texture_path="texture.png"
    )
    
    # Verify the output
    with open("test_custom_export/test.obj", 'r') as f:
        lines = f.readlines()
        vt_lines = [l for l in lines if l.startswith('vt ')]
        print(f"Found {len(vt_lines)} texture coordinates")
        if vt_lines:
            print(f"First 5 UV coordinates:")
            for line in vt_lines[:5]:
                print(f"  {line.strip()}")